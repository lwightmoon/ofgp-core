// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/ofgp/ofgp-core/business/p2p/p2p.proto

package p2p

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/ofgp/ofgp-core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type P2PMsg struct {
	Operation            uint32   `protobuf:"varint,1,opt,name=operation,proto3" json:"operation,omitempty"`
	SendAddr             string   `protobuf:"bytes,2,opt,name=send_addr,json=sendAddr,proto3" json:"send_addr,omitempty"`
	ReceiveAddr          string   `protobuf:"bytes,3,opt,name=receive_addr,json=receiveAddr,proto3" json:"receive_addr,omitempty"`
	Chain                uint32   `protobuf:"varint,4,opt,name=chain,proto3" json:"chain,omitempty"`
	TokenId              uint32   `protobuf:"varint,5,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Amount               uint64   `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee                  uint64   `protobuf:"varint,7,opt,name=fee,proto3" json:"fee,omitempty"`
	ExpiredTime          uint32   `protobuf:"varint,8,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
	SeqId                []byte   `protobuf:"bytes,9,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PMsg) Reset()         { *m = P2PMsg{} }
func (m *P2PMsg) String() string { return proto.CompactTextString(m) }
func (*P2PMsg) ProtoMessage()    {}
func (*P2PMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_43980e10aa29c47d, []int{0}
}
func (m *P2PMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMsg.Unmarshal(m, b)
}
func (m *P2PMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMsg.Marshal(b, m, deterministic)
}
func (dst *P2PMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMsg.Merge(dst, src)
}
func (m *P2PMsg) XXX_Size() int {
	return xxx_messageInfo_P2PMsg.Size(m)
}
func (m *P2PMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMsg.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMsg proto.InternalMessageInfo

func (m *P2PMsg) GetOperation() uint32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *P2PMsg) GetSendAddr() string {
	if m != nil {
		return m.SendAddr
	}
	return ""
}

func (m *P2PMsg) GetReceiveAddr() string {
	if m != nil {
		return m.ReceiveAddr
	}
	return ""
}

func (m *P2PMsg) GetChain() uint32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *P2PMsg) GetTokenId() uint32 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *P2PMsg) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *P2PMsg) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *P2PMsg) GetExpiredTime() uint32 {
	if m != nil {
		return m.ExpiredTime
	}
	return 0
}

func (m *P2PMsg) GetSeqId() []byte {
	if m != nil {
		return m.SeqId
	}
	return nil
}

type P2PInfo struct {
	Event                *proto1.WatchedEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Msg                  *P2PMsg              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *P2PInfo) Reset()         { *m = P2PInfo{} }
func (m *P2PInfo) String() string { return proto.CompactTextString(m) }
func (*P2PInfo) ProtoMessage()    {}
func (*P2PInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_43980e10aa29c47d, []int{1}
}
func (m *P2PInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PInfo.Unmarshal(m, b)
}
func (m *P2PInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PInfo.Marshal(b, m, deterministic)
}
func (dst *P2PInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PInfo.Merge(dst, src)
}
func (m *P2PInfo) XXX_Size() int {
	return xxx_messageInfo_P2PInfo.Size(m)
}
func (m *P2PInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PInfo.DiscardUnknown(m)
}

var xxx_messageInfo_P2PInfo proto.InternalMessageInfo

func (m *P2PInfo) GetEvent() *proto1.WatchedEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *P2PInfo) GetMsg() *P2PMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type P2PTx struct {
	SeqId                []byte   `protobuf:"bytes,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Initiator            *P2PInfo `protobuf:"bytes,2,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Matcher              *P2PInfo `protobuf:"bytes,3,opt,name=matcher,proto3" json:"matcher,omitempty"`
	Finished             bool     `protobuf:"varint,4,opt,name=finished,proto3" json:"finished,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PTx) Reset()         { *m = P2PTx{} }
func (m *P2PTx) String() string { return proto.CompactTextString(m) }
func (*P2PTx) ProtoMessage()    {}
func (*P2PTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_43980e10aa29c47d, []int{2}
}
func (m *P2PTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PTx.Unmarshal(m, b)
}
func (m *P2PTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PTx.Marshal(b, m, deterministic)
}
func (dst *P2PTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PTx.Merge(dst, src)
}
func (m *P2PTx) XXX_Size() int {
	return xxx_messageInfo_P2PTx.Size(m)
}
func (m *P2PTx) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PTx.DiscardUnknown(m)
}

var xxx_messageInfo_P2PTx proto.InternalMessageInfo

func (m *P2PTx) GetSeqId() []byte {
	if m != nil {
		return m.SeqId
	}
	return nil
}

func (m *P2PTx) GetInitiator() *P2PInfo {
	if m != nil {
		return m.Initiator
	}
	return nil
}

func (m *P2PTx) GetMatcher() *P2PInfo {
	if m != nil {
		return m.Matcher
	}
	return nil
}

func (m *P2PTx) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

type P2PConfirmMsg struct {
	Opration             uint32   `protobuf:"varint,1,opt,name=opration,proto3" json:"opration,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxId                 string   `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Chain                uint32   `protobuf:"varint,4,opt,name=chain,proto3" json:"chain,omitempty"`
	Height               uint64   `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash            string   `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Amount               uint64   `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee                  uint64   `protobuf:"varint,8,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PConfirmMsg) Reset()         { *m = P2PConfirmMsg{} }
func (m *P2PConfirmMsg) String() string { return proto.CompactTextString(m) }
func (*P2PConfirmMsg) ProtoMessage()    {}
func (*P2PConfirmMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_43980e10aa29c47d, []int{3}
}
func (m *P2PConfirmMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PConfirmMsg.Unmarshal(m, b)
}
func (m *P2PConfirmMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PConfirmMsg.Marshal(b, m, deterministic)
}
func (dst *P2PConfirmMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PConfirmMsg.Merge(dst, src)
}
func (m *P2PConfirmMsg) XXX_Size() int {
	return xxx_messageInfo_P2PConfirmMsg.Size(m)
}
func (m *P2PConfirmMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PConfirmMsg.DiscardUnknown(m)
}

var xxx_messageInfo_P2PConfirmMsg proto.InternalMessageInfo

func (m *P2PConfirmMsg) GetOpration() uint32 {
	if m != nil {
		return m.Opration
	}
	return 0
}

func (m *P2PConfirmMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *P2PConfirmMsg) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *P2PConfirmMsg) GetChain() uint32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *P2PConfirmMsg) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *P2PConfirmMsg) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *P2PConfirmMsg) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *P2PConfirmMsg) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

// 被确认交易
type P2PConfirmInfo struct {
	Event                *proto1.WatchedEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Msg                  *P2PConfirmMsg       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *P2PConfirmInfo) Reset()         { *m = P2PConfirmInfo{} }
func (m *P2PConfirmInfo) String() string { return proto.CompactTextString(m) }
func (*P2PConfirmInfo) ProtoMessage()    {}
func (*P2PConfirmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_43980e10aa29c47d, []int{4}
}
func (m *P2PConfirmInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PConfirmInfo.Unmarshal(m, b)
}
func (m *P2PConfirmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PConfirmInfo.Marshal(b, m, deterministic)
}
func (dst *P2PConfirmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PConfirmInfo.Merge(dst, src)
}
func (m *P2PConfirmInfo) XXX_Size() int {
	return xxx_messageInfo_P2PConfirmInfo.Size(m)
}
func (m *P2PConfirmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PConfirmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_P2PConfirmInfo proto.InternalMessageInfo

func (m *P2PConfirmInfo) GetEvent() *proto1.WatchedEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *P2PConfirmInfo) GetMsg() *P2PConfirmMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type P2PNewTx struct {
	SeqId                []byte          `protobuf:"bytes,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Initiator            *P2PConfirmInfo `protobuf:"bytes,2,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Matcher              *P2PConfirmInfo `protobuf:"bytes,3,opt,name=matcher,proto3" json:"matcher,omitempty"`
	Finished             bool            `protobuf:"varint,4,opt,name=finished,proto3" json:"finished,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *P2PNewTx) Reset()         { *m = P2PNewTx{} }
func (m *P2PNewTx) String() string { return proto.CompactTextString(m) }
func (*P2PNewTx) ProtoMessage()    {}
func (*P2PNewTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_43980e10aa29c47d, []int{5}
}
func (m *P2PNewTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PNewTx.Unmarshal(m, b)
}
func (m *P2PNewTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PNewTx.Marshal(b, m, deterministic)
}
func (dst *P2PNewTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PNewTx.Merge(dst, src)
}
func (m *P2PNewTx) XXX_Size() int {
	return xxx_messageInfo_P2PNewTx.Size(m)
}
func (m *P2PNewTx) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PNewTx.DiscardUnknown(m)
}

var xxx_messageInfo_P2PNewTx proto.InternalMessageInfo

func (m *P2PNewTx) GetSeqId() []byte {
	if m != nil {
		return m.SeqId
	}
	return nil
}

func (m *P2PNewTx) GetInitiator() *P2PConfirmInfo {
	if m != nil {
		return m.Initiator
	}
	return nil
}

func (m *P2PNewTx) GetMatcher() *P2PConfirmInfo {
	if m != nil {
		return m.Matcher
	}
	return nil
}

func (m *P2PNewTx) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

func init() {
	proto.RegisterType((*P2PMsg)(nil), "p2p.p2pMsg")
	proto.RegisterType((*P2PInfo)(nil), "p2p.p2pInfo")
	proto.RegisterType((*P2PTx)(nil), "p2p.p2pTx")
	proto.RegisterType((*P2PConfirmMsg)(nil), "p2p.p2pConfirmMsg")
	proto.RegisterType((*P2PConfirmInfo)(nil), "p2p.p2pConfirmInfo")
	proto.RegisterType((*P2PNewTx)(nil), "p2p.p2pNewTx")
}

func init() {
	proto.RegisterFile("github.com/ofgp/ofgp-core/business/p2p/p2p.proto", fileDescriptor_p2p_43980e10aa29c47d)
}

var fileDescriptor_p2p_43980e10aa29c47d = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xc7, 0xd3, 0x85, 0x96, 0xf6, 0xc0, 0x6e, 0xcc, 0xa0, 0x9b, 0x8a, 0x6e, 0x82, 0xc4, 0x18,
	0xd4, 0x2c, 0x68, 0x7d, 0x02, 0x63, 0x4c, 0xe4, 0x42, 0x2f, 0xea, 0x26, 0x5e, 0x92, 0xd2, 0x39,
	0xa5, 0x93, 0xb5, 0x33, 0xb3, 0x33, 0xc3, 0xca, 0x53, 0xf8, 0x0a, 0x3e, 0x8e, 0x0f, 0xe5, 0x8d,
	0x99, 0x69, 0xf9, 0x10, 0x97, 0x44, 0x2f, 0x20, 0x3d, 0xff, 0xf3, 0x35, 0xe7, 0xff, 0x83, 0x57,
	0x4b, 0x66, 0xca, 0xd5, 0x62, 0x92, 0x8b, 0x6a, 0x2a, 0x8a, 0xa5, 0x74, 0x7f, 0x97, 0xb9, 0x50,
	0x38, 0x5d, 0xac, 0x34, 0xe3, 0xa8, 0xf5, 0x54, 0x26, 0xd2, 0xfe, 0x26, 0x52, 0x09, 0x23, 0x48,
	0x4b, 0x26, 0x72, 0xf0, 0xf2, 0x78, 0x9b, 0xab, 0x9a, 0x2e, 0x54, 0x56, 0x98, 0xba, 0x63, 0xf4,
	0xcb, 0x83, 0x40, 0x26, 0xf2, 0xa3, 0x5e, 0x92, 0xc7, 0x10, 0x09, 0x89, 0x2a, 0x33, 0x4c, 0xf0,
	0xd8, 0x1b, 0x7a, 0xe3, 0xd3, 0x74, 0x27, 0x90, 0x47, 0x10, 0x69, 0xe4, 0x74, 0x9e, 0x51, 0xaa,
	0xe2, 0x93, 0xa1, 0x37, 0x8e, 0xd2, 0xd0, 0x0a, 0x6f, 0x29, 0x55, 0xe4, 0x09, 0xf4, 0x14, 0xe6,
	0xc8, 0x6e, 0xb1, 0xce, 0xb7, 0x5c, 0xbe, 0xdb, 0x68, 0xae, 0xe4, 0x3e, 0xf8, 0x79, 0x99, 0x31,
	0x1e, 0xb7, 0xdd, 0xe4, 0x3a, 0x20, 0x0f, 0x21, 0x34, 0xe2, 0x1a, 0xf9, 0x9c, 0xd1, 0xd8, 0x77,
	0x89, 0x8e, 0x8b, 0x67, 0x94, 0x9c, 0x43, 0x90, 0x55, 0x62, 0xc5, 0x4d, 0x1c, 0x0c, 0xbd, 0x71,
	0x3b, 0x6d, 0x22, 0x72, 0x0f, 0x5a, 0x05, 0x62, 0xdc, 0x71, 0xa2, 0xfd, 0xb4, 0xdb, 0x71, 0x2d,
	0x99, 0x42, 0x3a, 0x37, 0xac, 0xc2, 0x38, 0x74, 0x83, 0xba, 0x8d, 0x76, 0xc5, 0x2a, 0x24, 0x0f,
	0x20, 0xd0, 0x78, 0x63, 0xb7, 0x44, 0x43, 0x6f, 0xdc, 0x4b, 0x7d, 0x8d, 0x37, 0x33, 0x3a, 0xfa,
	0x0c, 0x1d, 0x99, 0xc8, 0x19, 0x2f, 0x04, 0x79, 0x0e, 0x3e, 0xde, 0x22, 0x37, 0xee, 0xf2, 0x6e,
	0xd2, 0xaf, 0xfd, 0x99, 0x7c, 0xc9, 0x4c, 0x5e, 0x22, 0x7d, 0x6f, 0x53, 0x69, 0x5d, 0x41, 0x2e,
	0xa0, 0x55, 0xe9, 0xa5, 0x33, 0xa1, 0x9b, 0x74, 0x27, 0xce, 0x7e, 0x67, 0x61, 0x6a, 0xf5, 0xd1,
	0x77, 0x0f, 0x7c, 0x99, 0xc8, 0xab, 0xf5, 0xde, 0x56, 0x6f, 0x6f, 0x2b, 0x79, 0x01, 0x11, 0xe3,
	0xcc, 0xb0, 0xcc, 0x08, 0xd5, 0x4c, 0xe9, 0x6d, 0xa6, 0xd8, 0xb7, 0xa4, 0xbb, 0x34, 0x79, 0x06,
	0x9d, 0xca, 0x3d, 0xa1, 0x36, 0xf5, 0xb0, 0x72, 0x93, 0x24, 0x03, 0x08, 0x0b, 0xc6, 0x99, 0x2e,
	0x91, 0x3a, 0x87, 0xc3, 0x74, 0x1b, 0x8f, 0x7e, 0x7a, 0x70, 0x2a, 0x13, 0xf9, 0x4e, 0xf0, 0x82,
	0xa9, 0xca, 0xa2, 0x1e, 0x40, 0x28, 0xe4, 0x1f, 0xa4, 0xb7, 0x31, 0x39, 0x83, 0x13, 0x46, 0x1b,
	0xc2, 0x27, 0x8c, 0x92, 0x3e, 0xf8, 0x66, 0x6d, 0x6f, 0xa8, 0xa1, 0xb6, 0xcd, 0x7a, 0x46, 0x8f,
	0xd0, 0x3c, 0x87, 0xa0, 0x44, 0xb6, 0x2c, 0x8d, 0x63, 0xd9, 0x4e, 0x9b, 0x88, 0x5c, 0x00, 0x2c,
	0xbe, 0x8a, 0xfc, 0x7a, 0x5e, 0x66, 0xba, 0x74, 0x38, 0xa3, 0x34, 0x72, 0xca, 0x87, 0x4c, 0x97,
	0x7b, 0xa4, 0x3b, 0x77, 0x91, 0x0e, 0xb7, 0xa4, 0x47, 0x19, 0x9c, 0xed, 0x0e, 0xf9, 0x5f, 0x6c,
	0x4f, 0xf7, 0xb1, 0x91, 0x8d, 0x8d, 0x3b, 0x57, 0x6a, 0x7a, 0x3f, 0x3c, 0x08, 0x65, 0x22, 0x3f,
	0xe1, 0xb7, 0xe3, 0x00, 0x5f, 0xff, 0x0d, 0xb0, 0x7f, 0x30, 0xef, 0x90, 0xe3, 0xe5, 0x21, 0xc7,
	0x3b, 0x1b, 0xfe, 0x05, 0xe7, 0x22, 0x70, 0x27, 0xbe, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x44,
	0xdd, 0x91, 0x9b, 0x1f, 0x04, 0x00, 0x00,
}
