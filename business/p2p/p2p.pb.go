// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/ofgp/ofgp-core/business/p2p/p2p.proto

package p2p

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/ofgp/ofgp-core/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type P2PMsg struct {
	SendAddr             []byte   `protobuf:"bytes,2,opt,name=send_addr,json=sendAddr,proto3" json:"send_addr,omitempty"`
	ReceiveAddr          []byte   `protobuf:"bytes,3,opt,name=receive_addr,json=receiveAddr,proto3" json:"receive_addr,omitempty"`
	Chain                uint32   `protobuf:"varint,4,opt,name=chain,proto3" json:"chain,omitempty"`
	TokenId              uint32   `protobuf:"varint,5,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Amount               uint64   `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee                  uint64   `protobuf:"varint,7,opt,name=fee,proto3" json:"fee,omitempty"`
	ExpiredTime          uint32   `protobuf:"varint,8,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
	RequireAddr          []byte   `protobuf:"bytes,9,opt,name=require_addr,json=requireAddr,proto3" json:"require_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PMsg) Reset()         { *m = P2PMsg{} }
func (m *P2PMsg) String() string { return proto.CompactTextString(m) }
func (*P2PMsg) ProtoMessage()    {}
func (*P2PMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_d38484d0e84373fb, []int{0}
}
func (m *P2PMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMsg.Unmarshal(m, b)
}
func (m *P2PMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMsg.Marshal(b, m, deterministic)
}
func (dst *P2PMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMsg.Merge(dst, src)
}
func (m *P2PMsg) XXX_Size() int {
	return xxx_messageInfo_P2PMsg.Size(m)
}
func (m *P2PMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMsg.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMsg proto.InternalMessageInfo

func (m *P2PMsg) GetSendAddr() []byte {
	if m != nil {
		return m.SendAddr
	}
	return nil
}

func (m *P2PMsg) GetReceiveAddr() []byte {
	if m != nil {
		return m.ReceiveAddr
	}
	return nil
}

func (m *P2PMsg) GetChain() uint32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *P2PMsg) GetTokenId() uint32 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *P2PMsg) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *P2PMsg) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *P2PMsg) GetExpiredTime() uint32 {
	if m != nil {
		return m.ExpiredTime
	}
	return 0
}

func (m *P2PMsg) GetRequireAddr() []byte {
	if m != nil {
		return m.RequireAddr
	}
	return nil
}

// 待匹配交易
type P2PInfo struct {
	Event                *proto1.WatchedEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Msg                  *P2PMsg              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Time                 int64                `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *P2PInfo) Reset()         { *m = P2PInfo{} }
func (m *P2PInfo) String() string { return proto.CompactTextString(m) }
func (*P2PInfo) ProtoMessage()    {}
func (*P2PInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_d38484d0e84373fb, []int{1}
}
func (m *P2PInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PInfo.Unmarshal(m, b)
}
func (m *P2PInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PInfo.Marshal(b, m, deterministic)
}
func (dst *P2PInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PInfo.Merge(dst, src)
}
func (m *P2PInfo) XXX_Size() int {
	return xxx_messageInfo_P2PInfo.Size(m)
}
func (m *P2PInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PInfo.DiscardUnknown(m)
}

var xxx_messageInfo_P2PInfo proto.InternalMessageInfo

func (m *P2PInfo) GetEvent() *proto1.WatchedEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *P2PInfo) GetMsg() *P2PMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *P2PInfo) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type P2PConfirmMsg struct {
	Opration             uint32   `protobuf:"varint,1,opt,name=opration,proto3" json:"opration,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TxId                 string   `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Chain                uint32   `protobuf:"varint,4,opt,name=chain,proto3" json:"chain,omitempty"`
	Height               uint64   `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	BlockHash            string   `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Amount               uint64   `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee                  uint64   `protobuf:"varint,8,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PConfirmMsg) Reset()         { *m = P2PConfirmMsg{} }
func (m *P2PConfirmMsg) String() string { return proto.CompactTextString(m) }
func (*P2PConfirmMsg) ProtoMessage()    {}
func (*P2PConfirmMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_d38484d0e84373fb, []int{2}
}
func (m *P2PConfirmMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PConfirmMsg.Unmarshal(m, b)
}
func (m *P2PConfirmMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PConfirmMsg.Marshal(b, m, deterministic)
}
func (dst *P2PConfirmMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PConfirmMsg.Merge(dst, src)
}
func (m *P2PConfirmMsg) XXX_Size() int {
	return xxx_messageInfo_P2PConfirmMsg.Size(m)
}
func (m *P2PConfirmMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PConfirmMsg.DiscardUnknown(m)
}

var xxx_messageInfo_P2PConfirmMsg proto.InternalMessageInfo

func (m *P2PConfirmMsg) GetOpration() uint32 {
	if m != nil {
		return m.Opration
	}
	return 0
}

func (m *P2PConfirmMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *P2PConfirmMsg) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *P2PConfirmMsg) GetChain() uint32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *P2PConfirmMsg) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *P2PConfirmMsg) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *P2PConfirmMsg) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *P2PConfirmMsg) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type WaitConfirmMsg struct {
	ScTxId               string          `protobuf:"bytes,1,opt,name=sc_tx_id,json=scTxId,proto3" json:"sc_tx_id,omitempty"`
	Opration             uint32          `protobuf:"varint,2,opt,name=opration,proto3" json:"opration,omitempty"`
	Chain                uint32          `protobuf:"varint,3,opt,name=chain,proto3" json:"chain,omitempty"`
	Info                 *P2PConfirmInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Time                 int64           `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WaitConfirmMsg) Reset()         { *m = WaitConfirmMsg{} }
func (m *WaitConfirmMsg) String() string { return proto.CompactTextString(m) }
func (*WaitConfirmMsg) ProtoMessage()    {}
func (*WaitConfirmMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_d38484d0e84373fb, []int{3}
}
func (m *WaitConfirmMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitConfirmMsg.Unmarshal(m, b)
}
func (m *WaitConfirmMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitConfirmMsg.Marshal(b, m, deterministic)
}
func (dst *WaitConfirmMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitConfirmMsg.Merge(dst, src)
}
func (m *WaitConfirmMsg) XXX_Size() int {
	return xxx_messageInfo_WaitConfirmMsg.Size(m)
}
func (m *WaitConfirmMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitConfirmMsg.DiscardUnknown(m)
}

var xxx_messageInfo_WaitConfirmMsg proto.InternalMessageInfo

func (m *WaitConfirmMsg) GetScTxId() string {
	if m != nil {
		return m.ScTxId
	}
	return ""
}

func (m *WaitConfirmMsg) GetOpration() uint32 {
	if m != nil {
		return m.Opration
	}
	return 0
}

func (m *WaitConfirmMsg) GetChain() uint32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *WaitConfirmMsg) GetInfo() *P2PConfirmInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *WaitConfirmMsg) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 被确认交易
type P2PConfirmInfo struct {
	Event                *proto1.WatchedEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Msg                  *P2PConfirmMsg       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *P2PConfirmInfo) Reset()         { *m = P2PConfirmInfo{} }
func (m *P2PConfirmInfo) String() string { return proto.CompactTextString(m) }
func (*P2PConfirmInfo) ProtoMessage()    {}
func (*P2PConfirmInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_d38484d0e84373fb, []int{4}
}
func (m *P2PConfirmInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PConfirmInfo.Unmarshal(m, b)
}
func (m *P2PConfirmInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PConfirmInfo.Marshal(b, m, deterministic)
}
func (dst *P2PConfirmInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PConfirmInfo.Merge(dst, src)
}
func (m *P2PConfirmInfo) XXX_Size() int {
	return xxx_messageInfo_P2PConfirmInfo.Size(m)
}
func (m *P2PConfirmInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PConfirmInfo.DiscardUnknown(m)
}

var xxx_messageInfo_P2PConfirmInfo proto.InternalMessageInfo

func (m *P2PConfirmInfo) GetEvent() *proto1.WatchedEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *P2PConfirmInfo) GetMsg() *P2PConfirmMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type SendedInfo struct {
	TxId                 string   `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	SignTerm             int64    `protobuf:"varint,2,opt,name=sign_term,json=signTerm,proto3" json:"sign_term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendedInfo) Reset()         { *m = SendedInfo{} }
func (m *SendedInfo) String() string { return proto.CompactTextString(m) }
func (*SendedInfo) ProtoMessage()    {}
func (*SendedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_d38484d0e84373fb, []int{5}
}
func (m *SendedInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendedInfo.Unmarshal(m, b)
}
func (m *SendedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendedInfo.Marshal(b, m, deterministic)
}
func (dst *SendedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendedInfo.Merge(dst, src)
}
func (m *SendedInfo) XXX_Size() int {
	return xxx_messageInfo_SendedInfo.Size(m)
}
func (m *SendedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SendedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SendedInfo proto.InternalMessageInfo

func (m *SendedInfo) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *SendedInfo) GetSignTerm() int64 {
	if m != nil {
		return m.SignTerm
	}
	return 0
}

// 创建待匹配交易索引
type TxNode struct {
	Value                string             `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Childs               map[string]*TxNode `protobuf:"bytes,2,rep,name=childs,proto3" json:"childs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TxNode) Reset()         { *m = TxNode{} }
func (m *TxNode) String() string { return proto.CompactTextString(m) }
func (*TxNode) ProtoMessage()    {}
func (*TxNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_p2p_d38484d0e84373fb, []int{6}
}
func (m *TxNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxNode.Unmarshal(m, b)
}
func (m *TxNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxNode.Marshal(b, m, deterministic)
}
func (dst *TxNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxNode.Merge(dst, src)
}
func (m *TxNode) XXX_Size() int {
	return xxx_messageInfo_TxNode.Size(m)
}
func (m *TxNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TxNode.DiscardUnknown(m)
}

var xxx_messageInfo_TxNode proto.InternalMessageInfo

func (m *TxNode) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TxNode) GetChilds() map[string]*TxNode {
	if m != nil {
		return m.Childs
	}
	return nil
}

func init() {
	proto.RegisterType((*P2PMsg)(nil), "p2p.p2pMsg")
	proto.RegisterType((*P2PInfo)(nil), "p2p.p2pInfo")
	proto.RegisterType((*P2PConfirmMsg)(nil), "p2p.p2pConfirmMsg")
	proto.RegisterType((*WaitConfirmMsg)(nil), "p2p.waitConfirmMsg")
	proto.RegisterType((*P2PConfirmInfo)(nil), "p2p.p2pConfirmInfo")
	proto.RegisterType((*SendedInfo)(nil), "p2p.sendedInfo")
	proto.RegisterType((*TxNode)(nil), "p2p.txNode")
	proto.RegisterMapType((map[string]*TxNode)(nil), "p2p.txNode.ChildsEntry")
}

func init() {
	proto.RegisterFile("github.com/ofgp/ofgp-core/business/p2p/p2p.proto", fileDescriptor_p2p_d38484d0e84373fb)
}

var fileDescriptor_p2p_d38484d0e84373fb = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0xc7, 0xe5, 0xa6, 0x4d, 0xd3, 0x93, 0x6d, 0xfa, 0xe4, 0x7d, 0x1a, 0x61, 0x68, 0x52, 0x57,
	0x21, 0x51, 0x84, 0x68, 0x51, 0xb8, 0x41, 0x5c, 0x20, 0xa1, 0x69, 0x88, 0x5d, 0xc0, 0x85, 0x35,
	0x89, 0xcb, 0x2a, 0x8d, 0x9d, 0xc4, 0xda, 0x62, 0x1b, 0xc7, 0x1d, 0xdd, 0x93, 0x20, 0x9e, 0x88,
	0x67, 0xe1, 0x2d, 0x90, 0x4f, 0xb2, 0x2a, 0x4c, 0xec, 0x82, 0x8b, 0x4d, 0x3e, 0xff, 0x73, 0x7c,
	0xce, 0xdf, 0xbf, 0xd3, 0xc0, 0xab, 0x52, 0xba, 0x6a, 0xb3, 0x5e, 0xe4, 0xba, 0x5e, 0xea, 0xa2,
	0x34, 0xf8, 0xef, 0x65, 0xae, 0xad, 0x58, 0xae, 0x37, 0x8d, 0x54, 0xa2, 0x69, 0x96, 0x26, 0x35,
	0xfe, 0x6f, 0x61, 0xac, 0x76, 0x9a, 0x06, 0x26, 0x35, 0xc7, 0x2f, 0x1e, 0xbe, 0x86, 0x55, 0xcb,
	0xb5, 0xcd, 0x0a, 0xd7, 0xde, 0x98, 0xfd, 0x22, 0x10, 0x9a, 0xd4, 0x7c, 0x6a, 0x4a, 0xfa, 0x04,
	0x26, 0x8d, 0x50, 0x7c, 0x95, 0x71, 0x6e, 0x93, 0xc1, 0x94, 0xcc, 0xf7, 0x58, 0xe4, 0x85, 0xf7,
	0x9c, 0x5b, 0x7a, 0x0a, 0x7b, 0x56, 0xe4, 0x42, 0xde, 0x88, 0x36, 0x1f, 0x60, 0x3e, 0xee, 0x34,
	0x2c, 0xf9, 0x1f, 0x46, 0x79, 0x95, 0x49, 0x95, 0x0c, 0xa7, 0x64, 0xbe, 0xcf, 0xda, 0x80, 0x3e,
	0x86, 0xc8, 0xe9, 0x2b, 0xa1, 0x56, 0x92, 0x27, 0x23, 0x4c, 0x8c, 0x31, 0xbe, 0xe0, 0xf4, 0x08,
	0xc2, 0xac, 0xd6, 0x1b, 0xe5, 0x92, 0x70, 0x4a, 0xe6, 0x43, 0xd6, 0x45, 0xf4, 0x3f, 0x08, 0x0a,
	0x21, 0x92, 0x31, 0x8a, 0xfe, 0xe8, 0xa7, 0x8b, 0xad, 0x91, 0x56, 0xf0, 0x95, 0x93, 0xb5, 0x48,
	0x22, 0x6c, 0x14, 0x77, 0xda, 0xa5, 0xac, 0x45, 0x6b, 0xf0, 0xeb, 0x46, 0xda, 0xce, 0xe0, 0xe4,
	0xce, 0x20, 0x6a, 0xde, 0xe0, 0xac, 0x84, 0xb1, 0x49, 0xcd, 0x85, 0x2a, 0x34, 0x7d, 0x0e, 0x23,
	0x71, 0x23, 0x94, 0x4b, 0xc8, 0x94, 0xcc, 0xe3, 0xf4, 0xb0, 0xa5, 0xb1, 0xf8, 0x92, 0xb9, 0xbc,
	0x12, 0xfc, 0xdc, 0xa7, 0x58, 0x5b, 0x41, 0x4f, 0x20, 0xa8, 0x9b, 0x12, 0x81, 0xc4, 0x69, 0xbc,
	0x40, 0xd8, 0x08, 0x8c, 0x79, 0x9d, 0x52, 0x18, 0xa2, 0x25, 0x0f, 0x24, 0x60, 0x78, 0x9e, 0xfd,
	0x24, 0xb0, 0x6f, 0x52, 0x73, 0xa6, 0x55, 0x21, 0x6d, 0xed, 0xd9, 0x1e, 0x43, 0xa4, 0x8d, 0xcd,
	0x9c, 0xd4, 0x0a, 0x47, 0xee, 0xb3, 0x5d, 0x4c, 0x0f, 0x60, 0x20, 0x39, 0xf6, 0x9f, 0xb0, 0x81,
	0xe4, 0xf4, 0x10, 0x46, 0x6e, 0xeb, 0x71, 0x05, 0x28, 0x0d, 0xdd, 0xf6, 0x82, 0x3f, 0x00, 0xf7,
	0x08, 0xc2, 0x4a, 0xc8, 0xb2, 0x72, 0x88, 0x76, 0xc8, 0xba, 0x88, 0x9e, 0x00, 0xac, 0xaf, 0x75,
	0x7e, 0xb5, 0xaa, 0xb2, 0xa6, 0x42, 0xba, 0x13, 0x36, 0x41, 0xe5, 0x63, 0xd6, 0x54, 0x3d, 0xf0,
	0xe3, 0xbf, 0x81, 0x8f, 0x76, 0xe0, 0x67, 0x3f, 0x08, 0x1c, 0x7c, 0xcb, 0xa4, 0xeb, 0x3d, 0x25,
	0x81, 0xa8, 0xc9, 0x57, 0xad, 0x43, 0x82, 0x9d, 0xc3, 0x26, 0xbf, 0xf4, 0x1e, 0xfb, 0x8f, 0x1c,
	0xdc, 0x7b, 0xe4, 0xce, 0x7f, 0xd0, 0xf7, 0xff, 0x0c, 0x86, 0x52, 0x15, 0x1a, 0x1f, 0x85, 0x5b,
	0x68, 0xe1, 0x76, 0xd3, 0xfc, 0xa6, 0x18, 0x16, 0xec, 0x28, 0x8f, 0x7a, 0x94, 0x33, 0x38, 0xf8,
	0xb3, 0xf6, 0x5f, 0xb6, 0xfa, 0xb4, 0xbf, 0x55, 0x7a, 0x6f, 0xf0, 0xdd, 0x72, 0x67, 0xef, 0x00,
	0xfc, 0x17, 0x20, 0x38, 0xb6, 0xdf, 0x2d, 0x86, 0xf4, 0x16, 0xe3, 0xbf, 0x1a, 0x59, 0xaa, 0x95,
	0x13, 0xb6, 0xc6, 0x76, 0x01, 0x8b, 0xbc, 0x70, 0x29, 0x6c, 0x3d, 0xfb, 0x4e, 0x20, 0x74, 0xdb,
	0xcf, 0x9a, 0x0b, 0x0f, 0xe0, 0x26, 0xbb, 0xde, 0x88, 0xee, 0x72, 0x1b, 0xd0, 0x25, 0x84, 0x79,
	0x25, 0xaf, 0x79, 0x93, 0x0c, 0xa6, 0xc1, 0x3c, 0x4e, 0x1f, 0xa1, 0x93, 0xf6, 0xca, 0xe2, 0x0c,
	0x33, 0xe7, 0xca, 0xd9, 0x5b, 0xd6, 0x95, 0x1d, 0x7f, 0x80, 0xb8, 0x27, 0xfb, 0x8d, 0x5d, 0x89,
	0xdb, 0xae, 0xa7, 0x3f, 0xd2, 0xd3, 0xbb, 0x39, 0xfd, 0x1f, 0x6c, 0xdb, 0xb0, 0x1b, 0xfa, 0x76,
	0xf0, 0x86, 0xac, 0x43, 0x44, 0xf3, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x74, 0x32,
	0xea, 0x64, 0x04, 0x00, 0x00,
}
