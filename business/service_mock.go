// Code generated by MockGen. DO NOT EDIT.
// Source: business.go

// Package mock_business is a generated GoMock package.
package business

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	message "github.com/ofgp/ofgp-core/message"
	node "github.com/ofgp/ofgp-core/node"
	proto "github.com/ofgp/ofgp-core/proto"
)

// MockIHandler is a mock of IHandler interface
type MockIHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIHandlerMockRecorder
}

// MockIHandlerMockRecorder is the mock recorder for MockIHandler
type MockIHandlerMockRecorder struct {
	mock *MockIHandler
}

// NewMockIHandler creates a new mock instance
func NewMockIHandler(ctrl *gomock.Controller) *MockIHandler {
	mock := &MockIHandler{ctrl: ctrl}
	mock.recorder = &MockIHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIHandler) EXPECT() *MockIHandlerMockRecorder {
	return m.recorder
}

// SetSuccessor mocks base method
func (m *MockIHandler) SetSuccessor(arg0 IHandler) {
	m.ctrl.Call(m, "SetSuccessor", arg0)
}

// SetSuccessor indicates an expected call of SetSuccessor
func (mr *MockIHandlerMockRecorder) SetSuccessor(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuccessor", reflect.TypeOf((*MockIHandler)(nil).SetSuccessor), arg0)
}

// HandleEvent mocks base method
func (m *MockIHandler) HandleEvent(event node.BusinessEvent) {
	m.ctrl.Call(m, "HandleEvent", event)
}

// HandleEvent indicates an expected call of HandleEvent
func (mr *MockIHandlerMockRecorder) HandleEvent(event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockIHandler)(nil).HandleEvent), event)
}

// MockMessage is a mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockMessage) Decode(arg0 []byte) {
	m.ctrl.Call(m, "Decode", arg0)
}

// Decode indicates an expected call of Decode
func (mr *MockMessageMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockMessage)(nil).Decode), arg0)
}

// MockIService is a mock of IService interface
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// SendToSign mocks base method
func (m *MockIService) SendToSign(req *message.CreateAndSignMsg) {
	m.ctrl.Call(m, "SendToSign", req)
}

// SendToSign indicates an expected call of SendToSign
func (mr *MockIServiceMockRecorder) SendToSign(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToSign", reflect.TypeOf((*MockIService)(nil).SendToSign), req)
}

// SendTx mocks base method
func (m *MockIService) SendTx(data *node.SignedData) error {
	ret := m.ctrl.Call(m, "SendTx", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTx indicates an expected call of SendTx
func (mr *MockIServiceMockRecorder) SendTx(data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTx", reflect.TypeOf((*MockIService)(nil).SendTx), data)
}

// IsDone mocks base method
func (m *MockIService) IsDone(scTxID string) bool {
	ret := m.ctrl.Call(m, "IsDone", scTxID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDone indicates an expected call of IsDone
func (mr *MockIServiceMockRecorder) IsDone(scTxID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDone", reflect.TypeOf((*MockIService)(nil).IsDone), scTxID)
}

// IsTxOnChain mocks base method
func (m *MockIService) IsTxOnChain(txID string, chain uint8) bool {
	ret := m.ctrl.Call(m, "IsTxOnChain", txID, chain)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTxOnChain indicates an expected call of IsTxOnChain
func (mr *MockIServiceMockRecorder) IsTxOnChain(txID, chain interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTxOnChain", reflect.TypeOf((*MockIService)(nil).IsTxOnChain), txID, chain)
}

// CommitTx mocks base method
func (m *MockIService) CommitTx(tx *proto.Transaction) {
	m.ctrl.Call(m, "CommitTx", tx)
}

// CommitTx indicates an expected call of CommitTx
func (mr *MockIServiceMockRecorder) CommitTx(tx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockIService)(nil).CommitTx), tx)
}

// SubScribe mocks base method
func (m *MockIService) SubScribe(business string) chan node.BusinessEvent {
	ret := m.ctrl.Call(m, "SubScribe", business)
	ret0, _ := ret[0].(chan node.BusinessEvent)
	return ret0
}

// SubScribe indicates an expected call of SubScribe
func (mr *MockIServiceMockRecorder) SubScribe(business interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubScribe", reflect.TypeOf((*MockIService)(nil).SubScribe), business)
}
